plugins {
	id 'org.jetbrains.kotlin.jvm' version '2.0.20'
	id 'org.jetbrains.kotlin.plugin.spring' version '2.0.20'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.jetbrains.kotlin.plugin.jpa' version '2.0.20'
	id "org.openapi.generator" version "7.12.0"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springAiVersion', '1.0.0-M7')
	set('seleniumVersion', '4.32.0')
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	implementation 'io.projectreactor.kotlin:reactor-kotlin-extensions'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'
	implementation 'org.springframework.ai:spring-ai-pdf-document-reader'
	implementation 'org.springframework.ai:spring-ai-model'
	implementation 'org.springframework.ai:spring-ai-starter-vector-store-qdrant'
	implementation 'com.zaxxer:HikariCP'
	implementation 'com.h2database:h2'
	implementation 'org.hibernate.orm:hibernate-core'
	implementation 'io.hypersistence:hypersistence-utils-hibernate-63:3.9.9'

	implementation 'com.squareup.okhttp3:okhttp:4.12.0'

	implementation 'dev.langchain4j:langchain4j:0.36.2'
	implementation 'dev.langchain4j:langchain4j-document-transformer-jsoup:0.36.2'

	implementation 'org.opensearch.client:opensearch-java:2.8.1'
	implementation 'org.apache.httpcomponents.client5:httpclient5'

	implementation 'commons-configuration:commons-configuration:1.10'
	implementation 'commons-io:commons-io:2.19.0'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
	testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test'
	testImplementation 'org.opensearch:opensearch-testcontainers:2.0.1'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// selenium
	implementation "org.seleniumhq.selenium:selenium-java:$seleniumVersion"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
		mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
	}
}

kotlin {
	compilerOptions {
		freeCompilerArgs.addAll '-Xjsr305=strict'
	}
}

allOpen {
	annotation 'jakarta.persistence.Entity'
	annotation 'jakarta.persistence.MappedSuperclass'
	annotation 'jakarta.persistence.Embeddable'
}

openApiGenerate {
	inputSpec.set("$rootDir/docs/api/giga_chat/api.yml")
	generatorName.set("kotlin")
	apiPackage = "com.example.demo.chat.giga.api"
	modelPackage = "com.example.demo.chat.giga.model"
	skipValidateSpec = true
	library = "jvm-spring-webclient"
	additionalProperties["serializationLibrary"] = "jackson"
	modelNameMappings["File"] = "UserFile"
	supportingFilesConstrainedTo = []
	globalProperties.set([
		apis: "false",
		modelDocs: "false",
		models: ""
	])
}

sourceSets {
	main {
		java {
			srcDir("$buildDir/generate-resources/main/src/main/kotlin")
		}
	}
}

tasks.compileKotlin{
	dependsOn("openApiGenerate")
}

tasks.named('test') {
	useJUnitPlatform()
}

// Selenium
def osMapping = [:]
osMapping[OperatingSystem.WINDOWS.getFamilyName()] = "win32";
osMapping[OperatingSystem.LINUX.getFamilyName()] = "linux64";
osMapping[OperatingSystem.MAC_OS.getFamilyName()] = "mac64";

def extMapping = [:]
extMapping[OperatingSystem.WINDOWS.getFamilyName()] = ".exe";
extMapping[OperatingSystem.LINUX.getFamilyName()] = "";
extMapping[OperatingSystem.MAC_OS.getFamilyName()] = "";

def osFamily = OperatingSystem.current().getFamilyName();

def driverDir = file("$projectDir/driver")
driverDir.mkdirs();

def chromeExecutable = file(driverDir.getAbsolutePath() + "/chromedriver${extMapping[osFamily]}")
def chromeVersion = System.getProperty("chromeVersion", '136.0.7103.92')
import org.gradle.internal.os.OperatingSystem;

tasks.register('downloadDriver', Copy) {

	if (!chromeExecutable.exists()) {
		def tempZip = File.createTempFile("chrome-driver", "")
		def url = "https://storage.googleapis.com/chrome-for-testing-public/$chromeVersion/${osMapping[osFamily]}/chromedriver-${osMapping[osFamily]}.zip"
		new URL(url).withInputStream { i -> tempZip.withOutputStream { it << i } }
		from {
			zipTree(tempZip.getAbsolutePath())
		}
		doLast {
			tempZip.delete()
		}
	}
	into chromeExecutable.getParentFile()
}